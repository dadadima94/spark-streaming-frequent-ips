from __future__ import print_function


import os
import sys

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
from pyspark.sql import HiveContext
from pyspark.sql.types import *
from pyspark.sql import Row


def format_stream(stream):
    triplets = stream.split(",")
    port = triplets[0]
    ip1 = triplets[1]
    ip2 = triplets[2]
    return (port + " <--> " + ip1, port + " <--> " + ip2)


def createContext(checkpoint):
    # If you do not see this printed, that means the StreamingContext has been loaded
    # from the new checkpoint
    print("Creating new context")
    sc = SparkContext(appName="PythonStreamingIPCount")
    sc.setLogLevel("ERROR")
    ssc = StreamingContext(sc, 1)
    ssc.checkpoint(checkpoint)
    return ssc

    # Create a socket stream on target ip:port and count the
    # words in input stream of \n delimited text (eg. generated by 'nc')


def getFrequentIps(stream, time_window, min_packets):
    frequent_ips = (stream.flatMap(lambda line: format_stream(line)) 			# Unfold the <port+ip1+ip2> package into the two ip+port records.
                    # Count the occurrences of a specific IP+Port.
                    .countByValueAndWindow(time_window, time_window, 4)
                    # Filter those who do not meet the minimum criteria.
                    .filter(lambda count: count[1] >= int(min_packets))
                    .transform(lambda record: record.sortBy(lambda x: x[1], ascending=False)))

    number_items = 10
    print("Every %s seconds the top-%s channles with more than %s packages will be showed: " %
          (time_window, number_items, min_packets))

    #  Store in Hive
    # df_csv = frequent_ips.map(lambda p: Row(PortIP = p[0], Counter=p[1]).toDF()
    # hc = HiveContext(sc)
    # df_csv.write.format("orc").saveAsTable("frequent_ips")

    frequent_ips.pprint(number_items)


if __name__ == "__main__":
    if len(sys.argv) != 5:
        sys.exit(-1)

    host, port, min_packets, time_window = sys.argv[1:]

    checkpoint = "Checkpoint"

    ssc = StreamingContext.getOrCreate(checkpoint, lambda: createContext(checkpoint))
    stream = ssc.socketTextStream(host, int(port))

    getFrequentIps(stream, int(time_window), int(min_packets))

    ssc.start()
    ssc.awaitTermination()
